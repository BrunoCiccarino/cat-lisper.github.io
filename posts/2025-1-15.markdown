---
title: Haskell notes for noobs
author: Bruno Ciccarino
tags: haskell, learning, functional-programming, fp, miranda, learn-you-haskell, haskell-the-hard-way
date: "2025-01-15T00:00:00Z" 
---

If you've tried learning haskell before but haven't gotten very far, this book might be for you. Many people take to haskell like ducks to water. Some people don't, however, and I think this is usually because of the way the material is presented - there is nothing difficult about learning haskell. In this book, I try to explain things a little differently than they are normally explained, to avoid the problems that some people have when learning from most books out there. The concreteness of the explanations here can help overcome unfamiliarity with the language. haskell is really just a normal programming language, but one with powerful features that can also be used in special ways.

Haskell emerged in the mid-1990s, with the aim of being the first purely functional language. For a long time, Haskell was considered an academic language, and therefore difficult, but it is currently used in several companies (in whole or in part of projects), especially fintechs, which are using a lot of haskell.

### References: 

- [Haskell the hard way](https://web.archive.org/web/20240820205228/https://yannesposito.com/Scratch/en/blog/Haskell-the-Hard-Way/)
- [Real world haskell](https://book.realworldhaskell.org/read/why-functional-programming-why-haskell.html)
- [Learn you haskell](https://web.archive.org/web/20240816183510/https://learnyouahaskell.com/)
- [Haskell notes for professionals](https://goalkicker.com/HaskellBook/)

### Table of contents

- [References:](#references)
- [Table of contents](#table-of-contents)
- [Introduction](#introduction)
- [**contextualizing**](#contextualizing)
- [Basics](#basics)
  - [Simple expressions](#simple-expressions)
    - [Challenge](#challenge)
  - [Hello world](#hello-world)
    - [Challenge](#challenge-1)
  - [Functions and High order function](#functions-and-high-order-function)
  - [Pure functions](#pure-functions)
    - [Challenge](#challenge-2)
  - [Primitive types](#primitive-types)
  - [lists](#lists)
  - [List operations](#list-operations)
    - [Challenge](#challenge-3)
  - [List comprehension](#list-comprehension)
  - [tuples](#tuples)
  - [Operations with tuples](#operations-with-tuples)
    - [Challenge](#challenge-4)
  - [Type inference](#type-inference)
  - [What to expect from type inference?](#what-to-expect-from-type-inference)
  - [Conditional operations](#conditional-operations)
  - [Type creation](#type-creation)

### Introduction

Before diving into Haskell, you'll need to set up your development environment. Here's a quick guide to get started:

1. **Install GHCup**:  
   GHCup is the recommended way to install Haskell tools like GHC (the Glasgow Haskell Compiler) and Cabal (the Haskell build system). Run the following command in your terminal:  

```bash
   curl -sSL https://get-ghcup.haskell.org | sh
```
Follow the on-screen instructions to complete the installation.

Add GHCup to your PATH:
If not done automatically, add the following line to your shell configuration file (.bashrc, .zshrc, etc.):

```bash
export PATH="$HOME/.ghcup/bin:$PATH"
```

Then reload your shell with source ~/.bashrc or equivalent.

Install GHC and Cabal:
Use GHCup to install the latest versions of GHC and Cabal:

```bash
ghcup install ghc
ghcup install cabal
```

Verify the installation with:

```bash
ghc --version
cabal --version
```

**Install stack**
The Haskell Stack is a cross-platform program that allows the development of Haskell projects. And to install just type these commands in your terminal (the commands may change depending on your package manager)

```bash
sudo apt-get install haskell-stack
```

**Set up an IDE or Editor**:
A good editor makes Haskell development more enjoyable. For a lightweight setup, you can use vim or Neovim with the haskell-language-server. Alternatively, VSCode with the Haskell extension offers a modern IDE experience.

The first thing we're going to do is run ghc's interactive mode and call some function to get a basic idea of ​​haskell. Open your terminal and type ghci . You will be greeted with something like this.

```
$ ghci
GHCi, version 9.4.7: https://www.haskell.org/ghc/  :? for help
ghci>
```

Now, with the stack we downloaded, create a project by typing 

stack new Haskell-notes-for-noobs

simple then it will create the project with the simple template, preparing our environment so that we can learn Haskell in the best way.

It will create a structure similar to this

```
[03:23 PM]-[charon@DESKTOP-27DNBRN]-[~]- |main U:8 ?:64 ✗|
$ cd Haskell-notes-for-noobs
/home/charon/Haskell-notes-for-noobs

[03:23 PM]-[charon@DESKTOP-27DNBRN]-[~/Haskell-notes-for-noobs]- |main U:8 ?:64 ✗|
$ ls
CHANGELOG.md  Haskell-notes-for-noobs.cabal  LICENSE  README.md  Setup.hs  app  package.yaml  src  stack.yaml  test
```

This is the folder we will use to do everything in this cookbook, for anyone who wants the codes, all the codes, including the answers to the challenges, they will be in this github repository: [haskell-notes-for-noobs](https://github.com/BrunoCiccarino/Haskell-notes-for-noobs)

### **contextualizing**

In the era of new languages, in the late 1980s, a team was assembled to develop a purely functional language that would later become haskell, named after mathematician Haskell Brooks Curry. 

Haskell with a very rich architecture, a modern, purely functional and non-strict language, specially designed to handle a wide range of applications, from numerical to symbolic. It has an elegant and expressive syntax.

Haskell is specially designed to handle large-scale industrial production applications. It is known for its rich built architecture. Haskell programs are written as mathematical functions. Everything can be done in Haskell, this blog was created in Haskell using the [hakyll](https://jaspervdj.be/hakyll/) static page generator, and don't be scared, it's actually easier than it looks.

### Basics

![](../images/cowboy.png)

If you're the kind of horrible person who doesn't read the intros to things and skipped, you might be interested in coming back, as I taught you how to prepare your haskell development environment. In haskell everything is done with function calls, hence the name functional statically, implicitly typed (the types are checked by the compiler, but you don't need to declare them), lazy (nothing is done until it needs to be done). Its closest popular relative is probably the ML family of languages ​​(which are not, however, lazy languages). 

> Note: Laziness by default is a very unusual language design. By default, Haskell evaluates something only when it is necessary. As a result, it provides a very elegant way of manipulating infinite structures, for example.

Okay, now we can make some basic expressions in Haskell so you can get the hang of it. 

#### Simple expressions

You can type most math expressions directly into ghci and get an answer.

```
$ ghci
GHCi, version 9.4.7: https://www.haskell.org/ghc/  :? for help
ghci>  3 * 5
15
ghci> 4 ^ 2 - 1
15
ghci> (1 - 5)^(3 * 2 - 4)
16
ghci>
```

For strings, it must be enclosed in "double quotes". And to concatenate them use the ++ operator.

```
ghci> "Hi dear"
"Hi dear"
ghci> "Hello" ++ "World"
"HelloWorld"
```

To call functions, simply place the arguments directly after the function. There are no parentheses as part of the function call:

```
ghci> gcd 21 14
7
ghci> round 6.59
7
ghci> not (5 < 3)
True
ghci> truncate 6.59
6
ghci> sqrt 2
1.4142135623730951
```

##### Challenge
- In the Haskell repl (read eval print loop) determine the value of each of the powers below.

- a. 25^1
- b. 150^0
- c. (7/9)^-2

#### Hello world

I/O can be used to read and write to the console, to print something on the screen we use putStrLn, putStr or print as in the example below.

```
ghci> putStrLn "Hello, dear"
Hello, dear
ghci> putStr "no line break"
no line breakghci> print (10 + 10)
20
ghci> print ( 1 > 2)
False
```

Reading can be done with getLine (which returns a String) or readLn (which returns any type of value you want). The<-O symbol is used to assign a name to the result of an I/O action. 

> Note: I/O is impure as it generates a side effect, we will see this later in the pure functions section

```haskell
main = do
    print "What is your name?"
    name <- getLine
    print ("Hello " ++ name ++ "!")
```

##### Challenge
- modify this code to ask how old you are

#### Functions and High order function

To apply a function in Haskell, we write the function name followed by its arguments. We do not use parentheses or commas to group or separate a function's arguments; just write the name of the function, followed by each argument in turn. As an example, let's apply the compare function, which takes two arguments.

```haskell
ghci> compare 2 3
LT
ghci> compare 3 3
EQ
ghci> compare 3 2
GT
ghci>
```

In haskell functions can receive functions as parameters, allowing the creation of generic functions, composing two or more functions and defining specific domain languages. Higher-order functions are not just a part of the Haskell experience, they are practically the Haskell experience. It turns out that if you want to define computations by defining what things are rather than defining steps that change some state and perhaps looping them, higher order functions are indispensable. They are a really powerful way of solving problems and thinking about programs.

Officially, each function in Haskell only accepts one parameter. So how is it possible that we have defined and used multiple functions that accept more than one parameter so far? Well, it's a clever trick! All functions that accepted multiple parameters so far have been curried functions. What does this mean? You will understand better with an example. Let's take our good friend, the max function. It appears that it accepts two parameters and returns the larger one. Doing max 7 8 first creates a function that accepts a parameter and returns 7 or that parameter, depending on which is greater. Then 8 is applied to that function and that function produces the desired result. It sounds like a mouthful, but it's actually a really cool concept. The following two calls are equivalent:

```
ghci> max 7 8
8
ghci> (max 7) 8
8
```

Putting a space between two things is simply function application. Space is like an operator and has the highest precedence. Let's look at the type of max. It's max :: (Ord a) => a -> a -> a. This can also be written as max :: (Ord a) => a -> (a -> a). This can be read as: max takes an a and returns (this is the ->) a function that takes an a and returns an a. This is why the return type and function parameters are all simply separated with arrows.

> Note: The operator => in Haskell: This operator separates the constraints (on type variables) from the rest of the type signature. For instance, in max :: (Ord a) => a -> a -> a, the Ord a constraint indicates that the type a must belong to the Ord type class, which means it supports ordering operations like <, >, and compare. The part after the => describes the actual function signature.

So how is this beneficial for us? Simply put, if we call a function with few parameters, we get back a partially applied function, that is, a function that takes in as many parameters as we left out. Using partial application (calling functions with few parameters, if you prefer) is a cool way to create functions on the fly so we can pass them to another function or seed them with some data.

Take a look at this offensively simple function:

```
addThree :: Int -> Int -> Int -> Int
addThree x y z = x + y + z
```

**Output**:

```
ghci> :l addThree.hs
[1 of 2] Compiling Main             ( addThree.hs, interpreted )
Ok, one module loaded.
ghci> addTwoMore = addThree 5
ghci> result = addTwoMore 10 15
ghci> print(result)
30
```

#### Pure functions

In haskell we have a concept of "pure functions", and then you tell me, what are pure functions? And I answer: 

For a function to be pure, it has to satisfy two requirements

- It always returns the same result for the same arguments. 
- It cannot have side effects

But what does this mean? 

Side effects are things like printing to the screen, reading/writing files, or communicating with other computers on the Internet are examples of side effects. In other words, most interactions with the outside world — almost everything that makes computers useful! — involves side effects.

Haskell encourages the use of pure functions, as they are easier to reason about than non-pure functions. In fact, pure functions in Haskell are very similar to functions used in mathematics. Mathematical functions are pure: they have no side effects and no states.

But there's a big problem with pure functions: they don't allow for certain vital and useful functions. For example, a function that opens a file on disk cannot be pure because its results will depend on whether the file exists or not. A function that returns input from a use is also not pure because it may return different results every time it is called (i.e., the user may type different input).

##### Challenge

- Pure functions are an essential concept in Haskell. A pure function always returns the same output for the same input and has no side effects. Your task is to create a pure function that calculates the area of a rectangle and a circle, given their dimensions.

#### Primitive types

In Haskell, types are how you describe the data your program will work with. Primitive types are types that are a collection of values ​​related to each other, for example: Int comprises the values ​​of integers, Bool contains only the values ​​True and False, etc... In haskell we use the following notation to define types: value :: type. Below are some examples of the types:

```haskell
False :: Bool
True :: Bool
10 :: Int
``` 

> Note: In haskell it is important to remember that types always start with a capital letter

**Some of these types are**: 

- Bool: Contains True and False values. Boolean expressions can be executed with the operators && (and), || (or) and not
- Char: Contains all characters in the Unicode system.
- String: sequences of characters delimited by double quotes.
- Int: Integers with fixed precision in 64 bits. Represents values ​​from -2^63 to 2^63 - 1.
- Integer: Integers of arbitrary precision. Represents integer values ​​of any precision memory is the limit. Slower than Int operations.
- Float: floating point values ​​with single precision. Allows you to represent numbers with a total of 7 digits, on average.
- Double: double precision floating point values ​​that allow representing a total of 16 digits on average

#### lists

![](../images/list.png)

Lists are sequences of elements of the same type grouped by square brackets and separated by commas. We can make lists of any type, for example:

```haskell
[1, 2, 3, 4, 5, 6, 7, 8, 9]
['1', 'a', 's', 'o', 'A']
```

> Note: that the last list is a list of strings, as all elements are enclosed in single quotes

We can also have lists of lists, For example: 

```haskell
[[1, 2, 3] [4, 5, 6]] :: [[Int]]
[['h', 'e', 'l', 'l', 'o'] ['w', 'o', 'r', 'l', 'd']] :: [[Char]]
```

- The list type does not specify its size
- There are no limitations regarding the type of list
- There are no limitations on the size of the list

A good example of a list is a string, which is nothing more than a list of characters. For example, the name Bruno is represented like this ["B", "r", "u", "n", "o"].

#### List operations

Haskell lists are separated into two segments, the head and the body, which is called the tail, these are native functions in prelude, the haskell standard library.

![](../images/listmonster.png)

The head always represents the first element in the list, as in the example below:

```haskell
ghci> head [1, 2, 3]
1
```

The tail represents the rest of the elements in the list, as shown in the example below:

```haskell
ghci> tail [1, 2, 3]
[2,3]
```

In haskell we have the symbol (:) which is the list construction operator. Every list is constructed through this operator. We can check that this operator is polymorphic, using the type command:

```haskell
ghci> :type (:)
(:) :: a -> [a] -> [a]
```

With this operator we can also build a list, as in the example below:

```haskell
ghci> 1:2:3:[]
[1,2,3]
```

##### Challenge

make a function that passes a list and returns the length of the list (the number of elements in the list)

**Input example**: 

```
sizeof ["a", "b", "c", "d"]
```

**Output example**: 

```
4
```

**Input example**: 

```
sizeof [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
```

**Output example**:

```
10
```

#### List comprehension

![](../images/startingout.png)


#### tuples 

Tuples are finite sequences of components containing zero or more different types: 

```haskell
(True, False) :: (Bool, Bool)
(1.0, "Yes", False) :: (Double, String, Bool)
```

We can also have lists of tuples:

```haskell
[(1, 2, 'a', False)] :: [(Int, Int, Char, Bool)]
```

> Note: It is important to remember that in haskell lists and tuples are immutable, unlike most languages, in haskell all types are immutable.
> Note: If you've ever studied Python, you're probably used to lists and tuples being almost interchangeable (or using them in the same way). Although the elements of a Python tuple are immutable, it can be indexed and iterated using the same methods as a list. This is not the case in Haskell, so don't try to take this idea with you into unfamiliar linguistic territory.

- The type of the tuple specifies its size
- There are no limitations on the types associated with the tuple (we can have tuples of tuples)
- Tuples must have a finite size
- Arity 1 tuples are not allowed to maintain compatibility with the use of parentheses as an evaluation order.

For example, if we went to ghci and tried to define a tuple `fst` with a single value (42), what do you think would happen?

```haskell
GHCi, version 9.4.7: https://www.haskell.org/ghc/  :? for help
ghci> fst (42)

<interactive>:1:1: error:
    • Could not deduce (Num (a, b0))
      from the context: Num (a, b)
        bound by the inferred type for ‘it’:
                   forall {a} {b}. Num (a, b) => a
        at <interactive>:1:1-8
      The type variable ‘b0’ is ambiguous
    • In the ambiguity check for the inferred type for ‘it’
      To defer the ambiguity check to use sites, enable AllowAmbiguousTypes
      When checking the inferred type
        it :: forall {a} {b}. Num (a, b) => a
```

On the other hand, we can have tuples of zero arity, that is, a tuple that contains zero elements within it. When a tuple has zero arity, it is called a unit, throughout this cookbook we will see more about!

#### Operations with tuples

Let's make a simple function that takes two tuples and returns their sum, a+c, b+d

**example**

```haskell
func :: (Int, Int) -> (Int, Int) -> (Int, Int)
func (a, b) (c, d) = (a+c, b+d)
```

**Output**

```
ghci> :l main.hs
[1 of 2] Compiling Main (main.hs, interpreted)
Okay, one module loaded.
ghci> func (2,3) (4,5)
(6.8)
```

What happened there? 

Well, first we create the func function, which is of the integer tuple type that returns an integer, then we call the function recursively, performing a sum operation between their values. 

##### Challenge

- Modify this code so that it returns the multiplication of values ​​within the tuples

Well, now let's do another operation with tuples, let's do a simple function that receives a tuple of strings and returns the elements of each position.

```haskell
func::(String, String, String)
func = ("Bruno", "Jorge", "Matheus")

func_prim (x, _, _) = x
func_sec (_, y, _) = y
func_ter (_, _, z) = z
```

And what is happening there? 

Well, first we define the function, which is of the tuple type that receives 3 strings, then we define the names, and we create 3 other auxiliary functions that are responsible for printing each name in the tuple.

And what does this underscore (_) mean? It tells the compiler to ignore the index in the position where the underscore is.

#### Type inference

Finally! Let's talk about this subject that makes our lives so much easier, type inference, let the compiler detect for you the type that is being used, this is called type inference!!

Haskell uses the Hindley Milner type inference system, but I will explain this better in the future. 

#### What to expect from type inference? 

While strong, static typing makes Haskell safe, type inference makes it essential. The result is stunning: we end up with a language that is safer than popular statically typed languages ​​and often more expressive than dynamically typed languages.

Wait, what do you mean by "type inference makes it essential"? How is it stunning?

Great question! Here's the deal: Haskell uses something called *type inference*. This means you don't always have to explicitly declare the type of every variable or function. The compiler is smart enough to figure it out on its own in many cases, even logical errors it points out in your code.

Now, combine that with *strong, static typing*. This ensures your code is super safe because the types are checked at compile time, so a lot of potential errors are caught before your program even runs.

Okay, so what makes this better than other languages?

Good point. In many statically typed languages, you have to write a lot of type annotations, which can feel repetitive or cumbersome. On the other hand, dynamically typed languages are expressive but might not catch type-related errors until runtime. 

Haskell hits this sweet spot: it's as safe as statically typed languages (or even safer) but often as expressive and concise as dynamically typed ones. That balance is what makes it *stunning*.

#### Conditional operations

You are probably already familiar with conditional statements, such as if and else from other imperative languages ​​such as C or Python, in haskell we also have these statements, the difference is that in haskell the else is mandatory if if is used, let's look at an example:

```haskell
-- Function to check if a number is positive, negative, or zero
checkNumber :: Int -> String
checkNumber n =
    if n > 0
        then "Positive"
        else if n < 0
            then "Negative"
            else "Zero"

main :: IO ()
main = do
    putStrLn (checkNumber 10)    -- Output: Positive
    putStrLn (checkNumber (-5))  -- Output: Negative
    putStrLn (checkNumber 0)     -- Output: Zero
```

In Haskell, conditional statements like if-then-else are expressions, meaning they always evaluate to a value. This differs from imperative languages where such constructs can be statements that do not necessarily produce a value. The mandatory else ensures that every possible branch of the condition is handled, aligning with Haskell's strong emphasis on total functions and exhaustive pattern matching.

This requirement for completeness is an essential feature of Haskell's functional nature. For instance, without an else branch, Haskell would not know what to return if the if condition evaluates to False. This is why the language enforces explicit handling of all cases in an if-then-else` construct.

Another notable aspect of conditional expressions in Haskell is their laziness. Only the branch corresponding to the evaluated condition is computed. For example:

```haskell
example :: Bool -> String
example condition =
    if condition
        then "True branch"
        else "False branch"
```
In this case, when condition is True, the "False branch" will not be evaluated. This can be particularly useful for optimizing performance, especially when working with expensive computations or infinite data structures.

Additionally, Haskell programmers often prefer using pattern matching or guards over if-then-else, as these approaches are often more concise and expressive. For example, the earlier checkNumber function could be rewritten using guards:

```haskell
checkNumber :: Int -> String
checkNumber n
    | n > 0     = "Positive"
    | n < 0     = "Negative"
    | otherwise = "Zero"
```

What is happening there? 

Well, there's another way to represent conditional operations, the statement | is equivalent to the well-known if, and the otherwise statement is equivalent to the well-known else.

#### Type creation

As with most modern programming languages, haskell can also create your custom types. And how does this work? 

In C we create the type by calling a function, typedef, in haskell we have the type function.

And how do we use this type function?

First we define the identifier and the type equivalent to the identifier, for example:

```haskell
type Name = String
type Age = Int
type MainLanguage = String

type Person = (Name, Age, MainLanguage)

myperson :: Person
myperson = ("Bruno", 22, "Haskell")
```

In this code we first define the type Name, which is a String, then the Age which is an integer and then the MainLanguage which is also a string. And then we create the function myperson which is of type person. And in the myperson function, we define the tuple that contains the Name, Age and MainLanguage types. When we run the code the output is this:

```
GHCi, version 9.4.7: https://www.haskell.org/ghc/ :? for help
ghci> :l main.hs
[1 of 2] Compiling Main (main.hs, interpreted)
Okay, one module loaded.
ghci> myperson
("Bruno",22,"Haskell")
ghci> 
```

